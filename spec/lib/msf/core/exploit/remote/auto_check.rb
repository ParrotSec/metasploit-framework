require 'spec_helper'
require 'msf/core/exploit'

RSpec.shared_examples "An AutoCheck module which can be overridden" do |opts|
  context "When the check method returns #{opts[:check_code]}", focus: opts[:focus] do
    let(:check_result) { opts[:check_code] }

    context "when the check method returns #{opts[:check_code]}" do
      context "when ForceExploit is enabled" do
        before(:each) do
          subject.datastore['ForceExploit'] = true
          subject.exploit
        end

        it "calls the check method" do
          expect(subject).to have_received(:check)
        end

        it 'calls the original exploit' do
          expect(subject).to have_received(:original_exploit_call)
        end
      end
    end

    context "when ForceExploit is disabled" do
      before(:each) do
        subject.datastore['ForceExploit'] = false
      end

      it "it doesn't call the original exploit" do
        expect { subject.exploit }.to raise_error(opts[:expected_error]) do
          expect(subject).to_not have_received(:original_exploit_call)
        end
      end
    end
  end
end

RSpec.describe Msf::Exploit::Remote::AutoCheck do
  let(:mock_module) do
    context_described_class = described_class
    Class.new(::Msf::Exploit) do
      prepend context_described_class

      def check
        # mocked
      end

      def exploit
        original_exploit_call
      end

      def original_exploit_call
        # Helper for verifying the original exploit function was called
      end
    end
  end
  subject { mock_module.new }

  before(:each) do
    allow(subject).to receive(:check).and_return(check_result)
    allow(subject).to receive(:original_exploit_call).and_call_original
  end

  describe '#exploit' do
    context 'when AutoCheck is disabled' do
      let(:check_result) { ::Msf::Exploit::CheckCode::Vulnerable }

      before(:each) do
        subject.datastore['AutoCheck'] = false
        subject.exploit
      end

      it "doesn't call the check method" do
        expect(subject).to_not have_received(:check)
      end

      it "correctly calls the exploit method" do
        expect(subject).to have_received(:original_exploit_call)
      end
    end

    context 'when AutoCheck is enabled' do
      before(:each) do
        subject.datastore['AutoCheck'] = true
      end

      context 'when the check method returns vulnerable' do
        let(:check_result) { ::Msf::Exploit::CheckCode::Vulnerable }

        before(:each) do
          subject.exploit
        end

        it "calls the check method" do
          expect(subject).to have_received(:check)
        end

        it 'calls the original exploit' do
          expect(subject).to have_received(:original_exploit_call)
        end
      end

      context 'when the check method returns appears' do
        let(:check_result) { ::Msf::Exploit::CheckCode::Appears }

        before(:each) do
          subject.exploit
        end

        it "calls the check method" do
          expect(subject).to have_received(:check)
        end

        it 'calls the original exploit' do
          expect(subject).to have_received(:original_exploit_call)
        end
      end

      it_behaves_like "An AutoCheck module which can be overridden",
                      check_code: ::Msf::Exploit::CheckCode::Safe,
                      expected_error: "The target is not exploitable. Enable ForceExploit to override check result."

      it_behaves_like "An AutoCheck module which can be overridden",
                      check_code: ::Msf::Exploit::CheckCode::Unsupported,
                      expected_error: "This module does not support check. Enable ForceExploit to override check result."

      it_behaves_like "An AutoCheck module which can be overridden",
                      check_code: ::Msf::Exploit::CheckCode::Unknown,
                      expected_error: "Cannot reliably check exploitability. Enable ForceExploit to override check result."
    end
  end
end
